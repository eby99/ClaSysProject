@model RegistrationPortal.ViewModels.UserProfileViewModel
@{
    ViewData["Title"] = "Profile";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - ClasySys Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Space+Grotesk:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
            --text-primary: rgba(255, 255, 255, 0.95);
            --text-secondary: rgba(255, 255, 255, 0.8);
            --text-muted: rgba(255, 255, 255, 0.6);
            --success-color: #10B981;
            --error-color: #ff6b6b;
            --warning-color: #F59E0B;
            --info-color: #3B82F6;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--primary-gradient);
            background-attachment: fixed;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background:
                radial-gradient(circle at 20% 50%, rgba(102, 126, 234, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(118, 75, 162, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 80%, rgba(240, 147, 251, 0.3) 0%, transparent 50%);
            animation: gradientShift 20s ease-in-out infinite;
            z-index: 0;
        }

        @@keyframes gradientShift {
            0%, 100% { opacity: 1; transform: scale(1) rotate(0deg); }
            25% { opacity: 0.8; transform: scale(1.05) rotate(1deg); }
            50% { opacity: 0.9; transform: scale(0.95) rotate(-1deg); }
            75% { opacity: 0.85; transform: scale(1.02) rotate(0.5deg); }
        }

        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 20s infinite linear;
        }

        @@keyframes float {
            0% {
                opacity: 0;
                transform: translateY(100vh) rotate(0deg);
            }
            10% {
                opacity: 1;
            }
            90% {
                opacity: 1;
            }
            100% {
                opacity: 0;
                transform: translateY(-100vh) rotate(360deg);
            }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            min-height: 100vh;
            position: relative;
            z-index: 2;
        }

        .profile-container {
            background: var(--glass-bg);
            backdrop-filter: blur(25px);
            border-radius: 24px;
            border: 1px solid var(--glass-border);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            color: var(--text-primary);
            position: relative;
            overflow: hidden;
        }

        .profile-header {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.05) 100%);
            padding: 3rem 2rem 2rem;
            text-align: center;
            border-bottom: 1px solid var(--glass-border);
            position: relative;
        }

        .profile-avatar {
            width: 120px;
            height: 120px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            border: 4px solid rgba(255, 255, 255, 0.3);
        }

        .profile-avatar i {
            font-size: 3rem;
            color: white;
        }

        .profile-name {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .profile-username {
            font-size: 1.1rem;
            color: var(--text-secondary);
            margin-bottom: 2rem;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.95rem;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
            color: white;
            text-decoration: none;
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-primary);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            color: var(--text-primary);
            text-decoration: none;
        }

        .btn-logout {
            background: rgba(255, 107, 107, 0.2);
            color: #ff6b6b;
            border: 1px solid rgba(255, 107, 107, 0.4);
        }

        .btn-logout:hover {
            background: rgba(255, 107, 107, 0.3);
            transform: translateY(-2px);
            color: #ff6b6b;
        }

        .profile-content {
            padding: 2rem;
        }

        .content-grid {
            margin-bottom: 2rem;
        }

        @@media (min-width: 992px) {
            .info-card {
                height: 100%;
            }

            .card-body {
                display: flex;
                flex-direction: column;
                height: 100%;
            }
        }

        .info-card {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .info-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        }

        .card-header {
            padding: 1.5rem 1.5rem 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card-title {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .card-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
        }

        .card-icon.personal { background: linear-gradient(45deg, #667eea, #764ba2); }
        .card-icon.contact { background: linear-gradient(45deg, #10B981, #059669); }
        .card-icon.account { background: linear-gradient(45deg, #F59E0B, #D97706); }
        .card-icon.preferences { background: linear-gradient(45deg, #8B5CF6, #7C3AED); }

        .card-body {
            padding: 1.5rem;
        }

        .info-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            gap: 1rem;
        }

        .info-row:last-child {
            border-bottom: none;
        }

        .info-label {
            font-weight: 600;
            color: var(--text-secondary);
            min-width: 120px;
            flex-shrink: 0;
        }

        .info-value {
            color: var(--text-primary);
            flex: 1;
        }

        .badge {
            padding: 0.4rem 0.8rem;
            border-radius: 8px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .badge-success {
            background: rgba(16, 185, 129, 0.25);
            color: #34d399;
            border: 1px solid rgba(16, 185, 129, 0.5);
            font-weight: 700;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        .badge-warning {
            background: rgba(245, 158, 11, 0.2);
            color: #F59E0B;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        .badge-secondary {
            background: rgba(148, 163, 184, 0.3);
            color: #e2e8f0;
            border: 1px solid rgba(148, 163, 184, 0.5);
        }

        .bio-section {
            grid-column: 1 / -1;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 2rem;
            text-align: center;
        }

        .bio-content {
            max-width: 600px;
            margin: 0 auto;
            font-size: 1.1rem;
            line-height: 1.7;
            color: var(--text-secondary);
        }

        .alert {
            background: rgba(16, 185, 129, 0.15);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #10B981;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            backdrop-filter: blur(10px);
        }

        .text-muted {
            color: var(--text-muted) !important;
            font-style: italic;
        }

        @@media (max-width: 576px) {
            .container {
                padding: 0.5rem;
            }

            .profile-header {
                padding: 1.5rem 1rem 1rem;
            }

            .profile-name {
                font-size: 1.75rem;
            }

            .profile-avatar {
                width: 100px;
                height: 100px;
                margin-bottom: 1rem;
            }

            .profile-avatar i {
                font-size: 2.5rem;
            }

            .action-buttons {
                flex-direction: column;
                gap: 0.75rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
                padding: 0.65rem 1.25rem;
                font-size: 0.9rem;
            }

            .profile-content {
                padding: 1rem;
            }

            .info-label {
                min-width: 90px;
                font-size: 0.9rem;
            }

            .info-value {
                font-size: 0.9rem;
            }

            .card-header {
                padding: 1rem 1rem 0.75rem;
            }

            .card-body {
                padding: 1rem;
            }

            .card-title {
                font-size: 1.1rem;
            }

            .card-icon {
                width: 35px;
                height: 35px;
                font-size: 1rem;
            }
        }

        @@media (min-width: 577px) and (max-width: 768px) {
            .profile-header {
                padding: 2rem 1rem 1.5rem;
            }

            .profile-name {
                font-size: 2rem;
            }

            .action-buttons {
                flex-wrap: wrap;
                justify-content: center;
                gap: 0.75rem;
            }

            .btn {
                min-width: 160px;
            }
        }
    </style>
</head>
<body>
    <div class="particles" id="particles"></div>

    <div class="container">
        <div class="profile-container animate__animated animate__fadeIn">
            <!-- Profile Header -->
            <div class="profile-header">
                <div class="profile-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <h1 class="profile-name">@Model.FullName</h1>
                <p class="profile-username">@@@Model.Username</p>

                <div class="action-buttons">
                    <a href="/" class="btn btn-primary">
                        <i class="fas fa-home"></i> Home
                    </a>
                    <a href="@Url.Action("EditProfile", "Account")" class="btn btn-secondary">
                        <i class="fas fa-edit"></i> Edit Profile
                    </a>
                    <form asp-action="Logout" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-logout">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </button>
                    </form>
                </div>
            </div>

            <!-- Login Success Message -->
            @if (ViewBag.LoginSuccess != null)
            {
                <div class="profile-content">
                    <div class="alert animate__animated animate__bounceIn">
                        <i class="fas fa-check-circle"></i>
                        Welcome back! You have successfully logged in.
                    </div>
                </div>
            }

            <!-- Profile Update Success Message -->
            @if (TempData["ProfileUpdateSuccess"] != null)
            {
                <div class="profile-content">
                    <div class="alert animate__animated animate__bounceIn">
                        <i class="fas fa-check-circle"></i>
                        @TempData["ProfileUpdateSuccess"]
                    </div>
                </div>
            }

            <!-- Profile Content -->
            <div class="profile-content">
                <div class="content-grid">
                    <div class="row g-4">
                        <!-- Personal Information -->
                        <div class="col-12 col-lg-6">
                            <div class="info-card animate__animated animate__fadeInUp h-100">
                        <div class="card-header">
                            <div class="card-title">
                                <div class="card-icon personal">
                                    <i class="fas fa-user"></i>
                                </div>
                                Personal Information
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="info-row">
                                <div class="info-label">Full Name</div>
                                <div class="info-value">@Model.FullName</div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Date of Birth</div>
                                <div class="info-value">@Model.DateOfBirth.ToString("MMMM d, yyyy")</div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Age</div>
                                <div class="info-value">@Model.Age years old</div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Gender</div>
                                <div class="info-value">
                                    @if (!string.IsNullOrEmpty(Model.Gender))
                                    {
                                        @GetGenderDisplayText(Model.Gender)
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not specified</span>
                                    }
                                </div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Country</div>
                                <div class="info-value">
                                    @if (!string.IsNullOrEmpty(Model.Country))
                                    {
                                        @GetCountryDisplayText(Model.Country)
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not specified</span>
                                    }
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>

                    <!-- Contact Information -->
                    <div class="col-12 col-lg-6">
                        <div class="info-card animate__animated animate__fadeInUp h-100" style="animation-delay: 0.1s;">
                        <div class="card-header">
                            <div class="card-title">
                                <div class="card-icon contact">
                                    <i class="fas fa-address-book"></i>
                                </div>
                                Contact Information
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="info-row">
                                <div class="info-label">Email</div>
                                <div class="info-value">@Model.Email</div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Phone</div>
                                <div class="info-value">
                                    @if (!string.IsNullOrEmpty(Model.PhoneNumber))
                                    {
                                        @FormatPhoneNumber(Model.PhoneNumber)
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not provided</span>
                                    }
                                </div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Address</div>
                                <div class="info-value">
                                    @if (!string.IsNullOrEmpty(Model.StreetAddress))
                                    {
                                        @Model.StreetAddress
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not provided</span>
                                    }
                                </div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">City, State</div>
                                <div class="info-value">
                                    @{
                                        var cityState = "";
                                        if (!string.IsNullOrEmpty(Model.City) && !string.IsNullOrEmpty(Model.State))
                                            cityState = $"{Model.City}, {Model.State}";
                                        else if (!string.IsNullOrEmpty(Model.City))
                                            cityState = Model.City;
                                        else if (!string.IsNullOrEmpty(Model.State))
                                            cityState = Model.State;
                                    }
                                    @if (!string.IsNullOrEmpty(cityState))
                                    {
                                        @cityState
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not provided</span>
                                    }
                                </div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">ZIP Code</div>
                                <div class="info-value">
                                    @if (!string.IsNullOrEmpty(Model.ZipCode))
                                    {
                                        @Model.ZipCode
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not provided</span>
                                    }
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>

                    <!-- Account Information -->
                    <div class="col-12 col-lg-6">
                        <div class="info-card animate__animated animate__fadeInUp h-100" style="animation-delay: 0.2s;">
                        <div class="card-header">
                            <div class="card-title">
                                <div class="card-icon account">
                                    <i class="fas fa-cog"></i>
                                </div>
                                Account Information
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="info-row">
                                <div class="info-label">Member Since</div>
                                <div class="info-value">
                                    @Model.CreatedDate.ToString("MMMM d, yyyy")
                                    <br><small class="text-muted">(@Model.DaysSinceMember days ago)</small>
                                </div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Last Updated</div>
                                <div class="info-value">@Model.LastModified.ToString("MMMM d, yyyy")</div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">Account Status</div>
                                <div class="info-value">
                                    @if (Model.IsActive)
                                    {
                                        <span class="badge badge-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-warning">Inactive</span>
                                    }
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(Model.ReferralCode))
                            {
                                <div class="info-row">
                                    <div class="info-label">Referral Code</div>
                                    <div class="info-value">@Model.ReferralCode</div>
                                </div>
                            }
                            </div>
                        </div>
                    </div>

                    <!-- Communication Preferences -->
                    <div class="col-12 col-lg-6">
                        <div class="info-card animate__animated animate__fadeInUp h-100" style="animation-delay: 0.3s;">
                        <div class="card-header">
                            <div class="card-title">
                                <div class="card-icon preferences">
                                    <i class="fas fa-bell"></i>
                                </div>
                                Preferences
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="info-row">
                                <div class="info-label">Newsletter</div>
                                <div class="info-value">
                                    @if (Model.ReceiveNewsletter)
                                    {
                                        <span class="badge badge-success">Subscribed</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-secondary">Not subscribed</span>
                                    }
                                </div>
                            </div>
                            <div class="info-row">
                                <div class="info-label">SMS Alerts</div>
                                <div class="info-value">
                                    @if (Model.ReceiveSMS)
                                    {
                                        <span class="badge badge-success">Enabled</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-secondary">Disabled</span>
                                    }
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>

                    <!-- Bio Section -->
                    <div class="col-12">
                        <div class="bio-section animate__animated animate__fadeInUp" style="animation-delay: 0.4s;">
                        <div class="card-title" style="margin-bottom: 1.5rem;">
                            <div class="card-icon personal">
                                <i class="fas fa-user-edit"></i>
                            </div>
                            About Me
                        </div>
                        <div class="bio-content">
                            @if (!string.IsNullOrEmpty(Model.Bio))
                            {
                                <p>@Model.Bio</p>
                            }
                            else
                            {
                                <p class="text-muted">No bio provided yet. Share something about yourself!</p>
                            }
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        $(document).ready(function() {
            // Generate floating particles
            function createParticles() {
                const particlesContainer = $('#particles');
                for (let i = 0; i < 20; i++) {
                    const particle = $('<div class="particle"></div>');
                    const size = Math.random() * 4 + 2;
                    particle.css({
                        width: size + 'px',
                        height: size + 'px',
                        left: Math.random() * 100 + '%',
                        animationDelay: Math.random() * 20 + 's',
                        animationDuration: (Math.random() * 20 + 20) + 's'
                    });
                    particlesContainer.append(particle);
                }
            }
            createParticles();

            // Auto-hide success alert
            setTimeout(function() {
                $('.alert').fadeOut(500);
            }, 5000);

            // Add hover animations to buttons
            $('.btn').hover(
                function() {
                    $(this).addClass('animate__animated animate__pulse');
                },
                function() {
                    $(this).removeClass('animate__animated animate__pulse');
                }
            );
        });
    </script>
</body>
</html>

@functions {
    string GetGenderDisplayText(string genderValue)
    {
        return genderValue switch
        {
            "Male" => "Male",
            "Female" => "Female",
            "Other" => "Other",
            "PreferNot" => "Prefer not to say",
            _ => "Not specified"
        };
    }

    string GetCountryDisplayText(string countryValue)
    {
        return countryValue switch
        {
            "US" => "United States",
            "UK" => "United Kingdom",
            "CA" => "Canada",
            "AU" => "Australia",
            "IN" => "India",
            "DE" => "Germany",
            "FR" => "France",
            "JP" => "Japan",
            "BR" => "Brazil",
            "Other" => "Other",
            _ => countryValue
        };
    }

    string FormatPhoneNumber(string phoneNumber)
    {
        if (string.IsNullOrEmpty(phoneNumber))
            return "Not provided";

        // Remove all non-numeric characters
        string numbers = System.Text.RegularExpressions.Regex.Replace(phoneNumber, @"[^\d]", "");

        if (numbers.Length == 10)
        {
            return $"({numbers.Substring(0, 3)}) {numbers.Substring(3, 3)}-{numbers.Substring(6, 4)}";
        }

        return phoneNumber; // Return as-is if not 10 digits
    }
}