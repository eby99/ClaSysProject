@model RegistrationPortal.ViewModels.RegistrationViewModel
@{
    ViewData["Title"] = "Register";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Registration Portal</title>

    <!-- CSS Libraries -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">

    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --glass-bg: rgba(255, 255, 255, 0.15);
            --glass-border: rgba(255, 255, 255, 0.25);
            --text-primary: rgba(255, 255, 255, 0.95);
            --text-secondary: rgba(255, 255, 255, 0.8);
            --text-muted: rgba(255, 255, 255, 0.6);
            --shadow-light: 0 8px 32px rgba(31, 38, 135, 0.37);
            --shadow-heavy: 0 25px 50px rgba(0, 0, 0, 0.25);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--primary-gradient);
            background-attachment: fixed;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }

        /* Animated Background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background:
                radial-gradient(circle at 20% 50%, rgba(102, 126, 234, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(118, 75, 162, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 40% 80%, rgba(240, 147, 251, 0.4) 0%, transparent 50%);
            animation: gradientShift 15s ease-in-out infinite;
            z-index: 0;
        }

        @@keyframes gradientShift {
            0%, 100% { transform: scale(1) rotate(0deg); opacity: 1; }
            25% { transform: scale(1.05) rotate(1deg); opacity: 0.8; }
            50% { transform: scale(0.95) rotate(-1deg); opacity: 0.9; }
            75% { transform: scale(1.02) rotate(0.5deg); opacity: 0.85; }
        }

        /* Floating Particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 20s infinite linear;
        }

        @@keyframes float {
            0% { opacity: 0; transform: translateY(100vh) rotate(0deg); }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { opacity: 0; transform: translateY(-100vh) rotate(360deg); }
        }

        /* Main Container */
        .main-container {
            position: relative;
            z-index: 2;
            min-height: 100vh;
            padding: 2rem 0;
        }

        /* Registration Card */
        .registration-card {
            background: var(--glass-bg);
            backdrop-filter: blur(25px);
            border-radius: 24px;
            border: 1px solid var(--glass-border);
            box-shadow: var(--shadow-heavy);
            margin: 2rem auto;
            max-width: 900px;
            overflow: hidden;
            position: relative;
            animation: slideInUp 0.8s ease-out;
        }

        @@keyframes slideInUp {
            from {
                transform: translateY(50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Header Section */
        .header-section {
            text-align: center;
            padding: 3rem 2rem 2rem;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.05));
            border-bottom: 1px solid var(--glass-border);
            position: relative;
        }

        .logo-container {
            margin-bottom: 1.5rem;
            animation: bounceIn 1s ease-out 0.3s both;
        }

        .logo-icon {
            width: 80px;
            height: 80px;
            background: var(--success-gradient);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            box-shadow: var(--shadow-light);
            position: relative;
            overflow: hidden;
        }

        .logo-icon::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transform: rotate(45deg);
            animation: shine 3s ease-in-out infinite;
        }

        @@keyframes shine {
            0%, 100% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            50% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .logo-icon i {
            font-size: 2.5rem;
            color: white;
            z-index: 1;
            position: relative;
        }

        .main-title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #ffffff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: fadeInUp 0.8s ease-out 0.5s both;
        }

        .subtitle {
            font-size: 1.1rem;
            color: var(--text-secondary);
            margin-bottom: 0;
            animation: fadeInUp 0.8s ease-out 0.7s both;
        }

        /* Progress Steps */
        .progress-section {
            padding: 2rem;
            background: rgba(255, 255, 255, 0.05);
            border-bottom: 1px solid var(--glass-border);
        }

        .step-indicators {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 3rem;
            margin-bottom: 2rem;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.75rem;
            position: relative;
            opacity: 0.5;
            transition: all 0.5s ease;
        }

        .step.active, .step.completed {
            opacity: 1;
        }

        .step.active {
            transform: scale(1.1);
        }

        .step-circle {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--glass-bg);
            border: 2px solid var(--glass-border);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.5s ease;
        }

        .step-progress {
            position: absolute;
            top: -4px;
            left: -4px;
            width: 68px;
            height: 68px;
            border-radius: 50%;
            background: conic-gradient(from -90deg, #4facfe 0%, #4facfe var(--progress, 0%), rgba(255, 255, 255, 0.2) var(--progress, 0%), rgba(255, 255, 255, 0.2) 100%);
            opacity: 0;
            transition: all 0.5s ease;
            z-index: 0;
        }

        .step.has-progress .step-progress {
            opacity: 1;
            animation: progressPulse 2s ease-in-out infinite;
        }

        @@keyframes progressPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        .step.step-complete .step-progress {
            background: conic-gradient(from -90deg, #00f2fe 0%, #00f2fe 100%);
            animation: progressComplete 1s ease-in-out;
        }

        @@keyframes progressComplete {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .step.active .step-circle {
            background: var(--success-gradient);
            border-color: transparent;
            box-shadow: 0 0 20px rgba(79, 172, 254, 0.5);
        }

        .step.completed .step-circle {
            background: var(--success-gradient);
            border-color: transparent;
        }

        .step-number {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-primary);
            z-index: 2;
        }

        .step.completed .step-number::before {
            content: '\f00c';
            font-family: 'Font Awesome 6 Free';
            font-weight: 900;
        }

        .step.completed .step-number {
            font-size: 0;
        }

        .step-label {
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--text-secondary);
            text-align: center;
        }

        .step-connector {
            position: absolute;
            top: 50%;
            left: 100%;
            width: 3rem;
            height: 2px;
            background: var(--glass-border);
            transform: translateY(-50%);
            transition: background 0.5s ease;
        }

        .step.completed .step-connector {
            background: #4facfe;
        }

        .step:last-child .step-connector {
            display: none;
        }

        /* Form Sections */
        .form-content {
            padding: 2rem;
        }

        .form-section {
            display: none;
            animation: fadeInRight 0.5s ease-out;
        }

        .form-section.active {
            display: block;
        }

        .section-title {
            font-family: 'Poppins', sans-serif;
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .section-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: var(--success-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.1rem;
        }

        /* Form Groups */
        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            font-size: 0.95rem;
        }

        .required {
            color: #ff6b6b;
            margin-left: 0.25rem;
        }

        .input-container {
            position: relative;
        }

        .form-control {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            border: 2px solid var(--glass-border);
            border-radius: 16px;
            background: var(--glass-bg);
            color: var(--text-primary);
            font-size: 1rem;
            font-weight: 500;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            position: relative;
        }

        .form-control:focus {
            outline: none;
            border-color: rgba(79, 172, 254, 0.8);
            background: rgba(255, 255, 255, 0.2);
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.2);
            transform: translateY(-2px);
        }

        .form-control::placeholder {
            color: var(--text-muted);
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
            font-size: 1.1rem;
            z-index: 1;
        }

        .form-control:focus ~ .input-icon {
            color: #4facfe;
        }

        /* Select Styling */
        select.form-control {
            appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4 5"><path fill="%23ffffff" d="M2 0L0 2h4zM2 5L0 3h4z"/></svg>');
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 12px;
            padding-right: 3rem;
        }

        /* Textarea */
        textarea.form-control {
            resize: vertical;
            min-height: 120px;
            padding-top: 1rem;
        }

        /* Checkbox Styling */
        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            margin: 0.75rem 0;
        }

        .checkbox-container {
            position: relative;
            display: flex;
            align-items: center;
            cursor: pointer;
        }

        .checkbox-container input[type="checkbox"] {
            width: 20px;
            height: 20px;
            border: 2px solid var(--glass-border);
            border-radius: 6px;
            background: var(--glass-bg);
            cursor: pointer;
            position: relative;
            appearance: none;
            transition: all 0.3s ease;
        }

        .checkbox-container input[type="checkbox"]:checked {
            background: var(--success-gradient);
            border-color: transparent;
        }

        .checkbox-container input[type="checkbox"]:checked::after {
            content: '\f00c';
            font-family: 'Font Awesome 6 Free';
            font-weight: 900;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 0.8rem;
        }

        .checkbox-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
            line-height: 1.4;
            cursor: pointer;
        }

        /* Error Messages */
        .error-message {
            color: #ff6b6b;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
            animation: slideInDown 0.3s ease;
        }

        .error-message.show {
            display: block;
        }

        .success-message-field {
            color: #4facfe;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
            animation: slideInDown 0.3s ease;
        }

        .success-message-field.show {
            display: block;
        }

        /* Password Strength Indicator */
        .password-strength {
            margin-top: 0.5rem;
            height: 4px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 2px;
            overflow: hidden;
        }

        .password-strength-bar {
            height: 100%;
            width: 0%;
            border-radius: 2px;
            transition: all 0.3s ease;
        }

        .strength-weak { background: #ff6b6b; }
        .strength-fair { background: #ffa726; }
        .strength-good { background: #66bb6a; }
        .strength-strong { background: #4facfe; }

        .password-requirements {
            margin-top: 0.5rem;
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        .requirement {
            display: flex;
            align-items: center;
            margin: 0.25rem 0;
            gap: 0.5rem;
        }

        .requirement.met {
            color: #4facfe;
        }

        .requirement i {
            font-size: 0.7rem;
        }

        /* Field Info */
        .field-info {
            color: var(--text-muted);
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }

        /* Navigation Buttons */
        .form-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 2rem;
            border-top: 1px solid var(--glass-border);
            background: rgba(255, 255, 255, 0.05);
        }

        .btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 16px;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: var(--success-gradient);
            color: white;
            box-shadow: var(--shadow-light);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px rgba(79, 172, 254, 0.4);
        }

        .btn-secondary {
            background: var(--glass-bg);
            color: var(--text-primary);
            border: 2px solid var(--glass-border);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        /* Loading Overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            flex-direction: column;
            gap: 1rem;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid var(--glass-border);
            border-top: 4px solid #4facfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            color: var(--text-primary);
            font-size: 1.1rem;
            font-weight: 500;
        }

        /* Success Message */
        .success-message {
            text-align: center;
            padding: 3rem 2rem;
            display: none;
            animation: bounceIn 0.8s ease-out;
        }

        .success-icon {
            width: 100px;
            height: 100px;
            background: var(--success-gradient);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 2rem;
            font-size: 3rem;
            color: white;
            animation: pulse 2s ease-in-out infinite;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .main-container {
                padding: 1rem 0;
            }

            .registration-card {
                margin: 1rem;
                border-radius: 16px;
            }

            .header-section {
                padding: 2rem 1rem 1.5rem;
            }

            .main-title {
                font-size: 2rem;
            }

            .step-indicators {
                gap: 1.5rem;
            }

            .step-circle {
                width: 50px;
                height: 50px;
            }

            .step-connector {
                width: 1.5rem;
            }

            .form-content,
            .form-navigation {
                padding: 1.5rem;
            }

            .btn {
                padding: 0.875rem 1.5rem;
                font-size: 0.95rem;
            }
        }

        @@media (max-width: 576px) {
            .step-indicators {
                flex-direction: column;
                gap: 1rem;
            }

            .step {
                flex-direction: row;
                gap: 1rem;
            }

            .step-connector {
                display: none;
            }

            .form-navigation {
                flex-direction: column;
                gap: 1rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }
        }

        /* Animation Classes */
        .fadeInUp {
            animation: fadeInUp 0.6s ease-out;
        }

        .fadeInRight {
            animation: fadeInRight 0.6s ease-out;
        }

        .fadeInLeft {
            animation: fadeInLeft 0.6s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes fadeInRight {
            from {
                opacity: 0;
                transform: translateX(30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes fadeInLeft {
            from {
                opacity: 0;
                transform: translateX(-30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes bounceIn {
            0% {
                opacity: 0;
                transform: scale(0.3);
            }
            50% {
                opacity: 1;
                transform: scale(1.05);
            }
            70% {
                transform: scale(0.9);
            }
            100% {
                opacity: 1;
                transform: scale(1);
            }
        }

        @@keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
        }
    </style>

    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js"></script>
</head>
<body>
    <!-- Floating Particles -->
    <div class="particles" id="particles"></div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
        <div class="loading-text">Creating your account...</div>
    </div>

    <!-- Main Container -->
    <div class="main-container">
        <div class="container">
            <div class="registration-card">
                <!-- Header Section -->
                <div class="header-section">
                    <div class="logo-container">
                        <div class="logo-icon">
                            <i class="fas fa-user-shield"></i>
                        </div>
                    </div>
                    <h1 class="main-title">Create Account</h1>
                    <p class="subtitle">Join our exclusive community today</p>
                </div>

                <!-- Progress Section -->
                <div class="progress-section">
                    <div class="step-indicators">
                        <div class="step active" data-step="1">
                            <div class="step-progress"></div>
                            <div class="step-circle">
                                <span class="step-number">1</span>
                            </div>
                            <div class="step-label">Personal Info</div>
                            <div class="step-connector"></div>
                        </div>
                        <div class="step" data-step="2">
                            <div class="step-progress"></div>
                            <div class="step-circle">
                                <span class="step-number">2</span>
                            </div>
                            <div class="step-label">Contact Details</div>
                            <div class="step-connector"></div>
                        </div>
                        <div class="step" data-step="3">
                            <div class="step-progress"></div>
                            <div class="step-circle">
                                <span class="step-number">3</span>
                            </div>
                            <div class="step-label">Security & Finish</div>
                        </div>
                    </div>
                </div>

                <!-- Form Content -->
                <form id="registrationForm" asp-controller="Account" asp-action="Register" method="post">
                    @Html.AntiForgeryToken()

                    <div class="form-content">
                        <!-- Step 1: Personal Information -->
                        <div class="form-section active" id="step1">
                            <h3 class="section-title">
                                <div class="section-icon">
                                    <i class="fas fa-user"></i>
                                </div>
                                Personal Information
                            </h3>

                            <div class="row g-4">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">First Name <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="FirstName" type="text" class="form-control" placeholder="Enter your first name" required data-validation="alphabets">
                                            <i class="fas fa-user input-icon"></i>
                                        </div>
                                        <div class="field-info">Only alphabets (A-Z, a-z), no spaces allowed</div>
                                        <div class="error-message" id="firstname-error">Please enter a valid first name</div>
                                        <div class="success-message-field" id="firstname-success">✓ Valid first name</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Last Name <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="LastName" type="text" class="form-control" placeholder="Enter your last name" required data-validation="alphabets">
                                            <i class="fas fa-user input-icon"></i>
                                        </div>
                                        <div class="field-info">Only alphabets (A-Z, a-z), no spaces allowed</div>
                                        <div class="error-message" id="lastname-error">Please enter a valid last name</div>
                                        <div class="success-message-field" id="lastname-success">✓ Valid last name</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Username <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="Username" type="text" class="form-control" placeholder="Choose a username" required maxlength="30" data-validation="username">
                                            <i class="fas fa-at input-icon"></i>
                                        </div>
                                        <div class="field-info">3-30 characters, letters, numbers and underscore only</div>
                                        <div class="error-message" id="username-error"></div>
                                        <div class="success-message-field" id="username-success">✓ Username is available</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Date of Birth <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="DateOfBirth" type="date" class="form-control" required data-validation="age">
                                            <i class="fas fa-calendar input-icon"></i>
                                        </div>
                                        <div class="field-info">You must be between 18 and 80 years old</div>
                                        <div class="error-message" id="dob-error">You must be between 18 and 80 years old</div>
                                        <div class="success-message-field" id="dob-success">✓ Valid age</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Gender</label>
                                        <div class="input-container">
                                            <select asp-for="Gender" class="form-control">
                                                <option value="">Select Gender</option>
                                                <option value="Male">Male</option>
                                                <option value="Female">Female</option>
                                                <option value="Other">Other</option>
                                                <option value="PreferNot">Prefer not to say</option>
                                            </select>
                                            <i class="fas fa-venus-mars input-icon"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Country <span class="required">*</span></label>
                                        <div class="input-container">
                                            <select asp-for="Country" class="form-control" required>
                                                <option value="">Select Country</option>
                                                <option value="US">United States</option>
                                                <option value="UK">United Kingdom</option>
                                                <option value="CA">Canada</option>
                                                <option value="AU">Australia</option>
                                                <option value="IN">India</option>
                                                <option value="DE">Germany</option>
                                                <option value="FR">France</option>
                                                <option value="JP">Japan</option>
                                                <option value="BR">Brazil</option>
                                                <option value="Other">Other</option>
                                            </select>
                                            <i class="fas fa-globe input-icon"></i>
                                        </div>
                                        <div class="error-message" id="country-error">Please select your country</div>
                                        <div class="success-message-field" id="country-success">✓ Country selected</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 2: Contact Information -->
                        <div class="form-section" id="step2">
                            <h3 class="section-title">
                                <div class="section-icon">
                                    <i class="fas fa-address-book"></i>
                                </div>
                                Contact Information
                            </h3>

                            <div class="row g-4">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Email Address <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="Email" type="email" class="form-control" placeholder="your.email@example.com" required data-validation="email">
                                            <i class="fas fa-envelope input-icon"></i>
                                        </div>
                                        <div class="error-message" id="email-error">Please enter a valid email address</div>
                                        <div class="success-message-field" id="email-success">✓ Email is available</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Phone Number <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="PhoneNumber" type="tel" class="form-control" placeholder="1234567890" required data-validation="phone" maxlength="10">
                                            <i class="fas fa-phone input-icon"></i>
                                        </div>
                                        <div class="field-info">Exactly 10 digits only (no characters, spaces, or symbols)</div>
                                        <div class="error-message" id="phone-error">Phone number must be exactly 10 digits</div>
                                        <div class="success-message-field" id="phone-success">✓ Phone number is available</div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-group">
                                        <label class="form-label">Street Address</label>
                                        <div class="input-container">
                                            <input asp-for="StreetAddress" type="text" class="form-control" placeholder="Enter your street address">
                                            <i class="fas fa-home input-icon"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">City</label>
                                        <div class="input-container">
                                            <input asp-for="City" type="text" class="form-control" placeholder="Enter city" data-validation="alphabets-spaces">
                                            <i class="fas fa-city input-icon"></i>
                                        </div>
                                        <div class="field-info">Only alphabets and spaces allowed</div>
                                        <div class="error-message" id="city-error">Only alphabets and spaces are allowed</div>
                                        <div class="success-message-field" id="city-success">✓ Valid city name</div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">State/Province</label>
                                        <div class="input-container">
                                            <input asp-for="State" type="text" class="form-control" placeholder="Enter state" data-validation="alphabets-spaces">
                                            <i class="fas fa-map-marked-alt input-icon"></i>
                                        </div>
                                        <div class="field-info">Only alphabets and spaces allowed</div>
                                        <div class="error-message" id="state-error">Only alphabets and spaces are allowed</div>
                                        <div class="success-message-field" id="state-success">✓ Valid state name</div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label">ZIP/Postal Code</label>
                                        <div class="input-container">
                                            <input asp-for="ZipCode" type="text" class="form-control" placeholder="123456" data-validation="zipcode" maxlength="6">
                                            <i class="fas fa-mail-bulk input-icon"></i>
                                        </div>
                                        <div class="field-info">Exactly 6 digits only</div>
                                        <div class="error-message" id="zipcode-error">ZIP code must be exactly 6 digits</div>
                                        <div class="success-message-field" id="zipcode-success">✓ Valid ZIP code</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 3: Security & Additional Info -->
                        <div class="form-section" id="step3">
                            <h3 class="section-title">
                                <div class="section-icon">
                                    <i class="fas fa-shield-alt"></i>
                                </div>
                                Security & Additional Information
                            </h3>

                            <div class="row g-4">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Password <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="Password" type="password" class="form-control" placeholder="Create strong password" required minlength="8" id="password-field">
                                            <i class="fas fa-lock input-icon"></i>
                                        </div>
                                        <div class="password-strength">
                                            <div class="password-strength-bar" id="strength-bar"></div>
                                        </div>
                                        <div class="password-requirements" id="password-requirements">
                                            <div class="requirement" id="req-length">
                                                <i class="fas fa-times"></i>
                                                <span>At least 8 characters</span>
                                            </div>
                                            <div class="requirement" id="req-uppercase">
                                                <i class="fas fa-times"></i>
                                                <span>At least one uppercase letter</span>
                                            </div>
                                            <div class="requirement" id="req-lowercase">
                                                <i class="fas fa-times"></i>
                                                <span>At least one lowercase letter</span>
                                            </div>
                                            <div class="requirement" id="req-number">
                                                <i class="fas fa-times"></i>
                                                <span>At least one number</span>
                                            </div>
                                            <div class="requirement" id="req-special">
                                                <i class="fas fa-times"></i>
                                                <span>At least one special character</span>
                                            </div>
                                        </div>
                                        <div class="error-message" id="password-error">Password does not meet requirements</div>
                                        <div class="success-message-field" id="password-success">✓ Strong password</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Confirm Password <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="ConfirmPassword" type="password" class="form-control" placeholder="Re-enter password" required minlength="8" id="confirm-password-field">
                                            <i class="fas fa-lock input-icon"></i>
                                        </div>
                                        <div class="error-message" id="confirm-password-error">Passwords do not match</div>
                                        <div class="success-message-field" id="confirm-password-success">✓ Passwords match</div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-group">
                                        <label class="form-label">Security Question <span class="required">*</span></label>
                                        <div class="input-container">
                                            <select asp-for="SecurityQuestion" class="form-control" required>
                                                <option value="">Select a security question</option>
                                                <option value="pet">What was your first pet's name?</option>
                                                <option value="school">What elementary school did you attend?</option>
                                                <option value="mother">What is your mother's maiden name?</option>
                                                <option value="city">In what city were you born?</option>
                                                <option value="friend">What is your best friend's name?</option>
                                            </select>
                                            <i class="fas fa-question-circle input-icon"></i>
                                        </div>
                                        <div class="error-message" id="security-question-error">Please select a security question</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Security Answer <span class="required">*</span></label>
                                        <div class="input-container">
                                            <input asp-for="SecurityAnswer" type="text" class="form-control" placeholder="Your answer" required>
                                            <i class="fas fa-key input-icon"></i>
                                        </div>
                                        <div class="error-message" id="security-answer-error">Please provide an answer</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Referral Code</label>
                                        <div class="input-container">
                                            <input asp-for="ReferralCode" type="text" class="form-control" placeholder="Optional referral code">
                                            <i class="fas fa-gift input-icon"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-group">
                                        <label class="form-label">Bio / About You</label>
                                        <div class="input-container">
                                            <textarea asp-for="Bio" class="form-control" placeholder="Share something about yourself..." maxlength="500"></textarea>
                                        </div>
                                        <div class="field-info">
                                            <span id="bio-count">0</span>/500 characters
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-group">
                                        <label class="form-label">Communication Preferences</label>
                                        <div class="checkbox-group">
                                            <div class="checkbox-container">
                                                <input asp-for="ReceiveNewsletter" type="checkbox" id="newsletter">
                                            </div>
                                            <label for="newsletter" class="checkbox-label">
                                                Receive newsletters and updates
                                            </label>
                                        </div>
                                        <div class="checkbox-group">
                                            <div class="checkbox-container">
                                                <input asp-for="ReceiveSMS" type="checkbox" id="sms-alerts">
                                            </div>
                                            <label for="sms-alerts" class="checkbox-label">
                                                Receive SMS notifications
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-group">
                                        <div class="checkbox-group">
                                            <div class="checkbox-container">
                                                <input type="checkbox" id="terms" name="TermsAccepted" required>
                                            </div>
                                            <label for="terms" class="checkbox-label">
                                                I agree to the <a href="javascript:void(0);" style="color: #4facfe;">Terms of Service</a> and
                                                <a href="javascript:void(0);" style="color: #4facfe;">Privacy Policy</a> <span class="required">*</span>
                                            </label>
                                        </div>
                                        <div class="error-message" id="terms-error">You must accept the terms and conditions</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Form Navigation -->
                    <div class="form-navigation">
                        <button type="button" class="btn btn-secondary" id="prevBtn" style="display: none;">
                            <i class="fas fa-arrow-left"></i> Previous
                        </button>
                        <div class="flex-grow-1"></div>
                        <button type="button" class="btn btn-primary" id="nextBtn">
                            Next <i class="fas fa-arrow-right"></i>
                        </button>
                        <button type="submit" class="btn btn-primary" id="submitBtn" style="display: none;">
                            <i class="fas fa-user-plus"></i> Create Account
                        </button>
                    </div>
                </form>

                <!-- Success Message -->
                <div class="success-message" id="successMessage">
                    <div class="success-icon">
                        <i class="fas fa-check"></i>
                    </div>
                    <h2 style="color: var(--text-primary); margin-bottom: 1rem;">Account Created Successfully!</h2>
                    <p style="color: var(--text-secondary); margin-bottom: 2rem;">Welcome to our community! You can now sign in with your credentials.</p>
                    <a href="@Url.Action("Login", "Account")" class="btn btn-primary">
                        <i class="fas fa-sign-in-alt"></i> Sign In
                    </a>
                </div>
            </div>

            <!-- Footer -->
            <div class="text-center mt-4">
                <p style="color: var(--text-muted);">
                    Already have an account?
                    <a href="@Url.Action("Login", "Account")" style="color: #4facfe; text-decoration: none;">Sign in here</a>
                </p>
                <p style="color: var(--text-muted); font-size: 0.9rem;">
                    Need help? Contact <a href="mailto:support@example.com" style="color: #4facfe;">support@example.com</a>
                </p>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            let currentStep = 1;
            const totalSteps = 3;
            let stepValidationStatus = { 1: {}, 2: {}, 3: {} };
            let uniqueValidationCache = {};

            // Initialize
            updateStepIndicators();
            createParticles();
            initializeAgeRestrictions();
            updateNavigation();

            // Bio character counter
            $('#Bio').on('input', function() {
                const count = $(this).val().length;
                $('#bio-count').text(count);
            });

            // Mark fields as touched when user starts interacting
            $('input, select, textarea').on('focus', function() {
                $(this).data('touched', true);
            });

            // Field validation handlers - only validate on blur and specific events
            $('input, select, textarea').on('blur change paste', function() {
                const $field = $(this);
                $field.data('touched', true); // Mark as touched on blur
                // Small delay to ensure paste/autocomplete data is processed
                setTimeout(function() {
                    validateField($field);
                    updateStepProgress();
                    updateNavigationState();
                }, 50);
            });

            // Real-time input handlers
            $('input[data-validation]').on('input', function() {
                const $field = $(this);
                const validationType = $field.data('validation');

                if (validationType === 'phone') {
                    // Only allow digits
                    let value = $field.val().replace(/\D/g, '');
                    if (value.length > 10) value = value.slice(0, 10);
                    $field.val(value);
                } else if (validationType === 'zipcode') {
                    // Only allow digits
                    let value = $field.val().replace(/\D/g, '');
                    if (value.length > 6) value = value.slice(0, 6);
                    $field.val(value);
                } else if (validationType === 'alphabets') {
                    // Only allow alphabets
                    $field.val($field.val().replace(/[^a-zA-Z]/g, ''));
                } else if (validationType === 'alphabets-spaces') {
                    // Only allow alphabets and spaces
                    $field.val($field.val().replace(/[^a-zA-Z\s]/g, ''));
                }
            });

            // Password strength validation - show strength while typing but don't update progress
            $('#password-field').on('input', function() {
                validatePasswordStrength($(this).val());
                // Also recheck password confirmation when main password changes
                if ($('#confirm-password-field').val()) {
                    validatePasswordConfirmation();
                }
            });

            // Password field validation - only update progress on blur
            $('#password-field').on('blur', function() {
                $(this).data('touched', true);
                validateField($(this));
                updateStepProgress();
                updateNavigationState();
            });

            // Confirm password validation - show validation while typing but don't update progress
            $('#confirm-password-field').on('input', function() {
                validatePasswordConfirmation();
            });

            // Confirm password field validation - only update progress on blur
            $('#confirm-password-field').on('blur', function() {
                $(this).data('touched', true);
                validatePasswordConfirmation();
                updateStepProgress();
                updateNavigationState();
            });

            // Terms checkbox
            $('#terms').on('change', function() {
                updateNavigationState();
            });

            // Step navigation
            $('#nextBtn').click(function() {
                if (canProceedToNextStep()) {
                    if (currentStep < totalSteps) {
                        currentStep++;
                        showStep(currentStep);
                        updateStepIndicators();
                        updateNavigation();
                    }
                }
            });

            $('#prevBtn').click(function() {
                if (currentStep > 1) {
                    currentStep--;
                    showStep(currentStep);
                    updateStepIndicators();
                    updateNavigation();
                }
            });

            // Form submission
            $('#registrationForm').submit(function(e) {
                e.preventDefault();
                if (canSubmitForm()) {
                    showLoading();
                    // Submit the form using AJAX
                    submitForm();
                }
            });

            function initializeAgeRestrictions() {
                const today = new Date();
                const minDate = new Date(today.getFullYear() - 80, today.getMonth(), today.getDate());
                const maxDate = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
                const defaultDate = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());

                $('#DateOfBirth').attr('min', minDate.toISOString().split('T')[0]);
                $('#DateOfBirth').attr('max', maxDate.toISOString().split('T')[0]);
                $('#DateOfBirth').val(defaultDate.toISOString().split('T')[0]);
            }

            function validateField($field) {
                const fieldId = $field.attr('id') || $field.attr('name');
                const validationType = $field.data('validation');
                const value = $field.val().trim();
                const isRequired = $field.prop('required');
                const $errorMsg = $field.closest('.form-group').find('.error-message');
                const $successMsg = $field.closest('.form-group').find('.success-message-field');

                let isValid = true;
                let errorMessage = '';

                // Clear previous states
                $errorMsg.removeClass('show');
                $successMsg.removeClass('show');

                // For required fields, only show error if the field has been touched and is empty
                // Don't show required error while user is actively typing
                if (isRequired && !value && $field.data('touched')) {
                    isValid = false;
                    errorMessage = 'This field is required';
                } else if (value) {
                    // Field-specific validations
                    switch (validationType) {
                        case 'alphabets':
                            if (!/^[a-zA-Z]+$/.test(value)) {
                                isValid = false;
                                errorMessage = 'Only alphabets are allowed, no spaces';
                            }
                            break;
                        case 'alphabets-spaces':
                            if (!/^[a-zA-Z\s]+$/.test(value)) {
                                isValid = false;
                                errorMessage = 'Only alphabets and spaces are allowed';
                            }
                            break;
                        case 'username':
                            if (!/^[a-zA-Z0-9_]{3,30}$/.test(value)) {
                                isValid = false;
                                errorMessage = '3-30 characters, letters, numbers and underscore only';
                            } else {
                                checkUniqueness('username', value, $field);
                            }
                            break;
                        case 'email':
                            // Use HTML5 email validation
                            const emailInput = document.createElement('input');
                            emailInput.type = 'email';
                            emailInput.value = value;
                            const emailValid = emailInput.validity.valid && value.length > 0;
                            if (!emailValid) {
                                isValid = false;
                                errorMessage = 'Please enter a valid email address';
                            } else {
                                checkUniqueness('email', value, $field);
                            }
                            break;
                        case 'phone':
                            if (!/^\d{10}$/.test(value)) {
                                isValid = false;
                                errorMessage = 'Phone number must be exactly 10 digits';
                            } else {
                                checkUniqueness('phone', value, $field);
                            }
                            break;
                        case 'zipcode':
                            if (!/^\d{6}$/.test(value)) {
                                isValid = false;
                                errorMessage = 'ZIP code must be exactly 6 digits';
                            }
                            break;
                        case 'age':
                            const birthDate = new Date(value);
                            const today = new Date();
                            const age = today.getFullYear() - birthDate.getFullYear();
                            const monthDiff = today.getMonth() - birthDate.getMonth();

                            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                                age--;
                            }

                            if (age < 18 || age > 80) {
                                isValid = false;
                                errorMessage = 'You must be between 18 and 80 years old';
                            }
                            break;
                    }
                }

                // Update field validation status
                const stepNum = getStepForField(fieldId);
                if (stepNum) {
                    stepValidationStatus[stepNum][fieldId] = isValid;
                }

                // Show error or success message
                if (!isValid && errorMessage) {
                    $errorMsg.text(errorMessage).addClass('show');
                } else if (isValid && value && !['username', 'email', 'phone'].includes(validationType)) {
                    $successMsg.addClass('show');
                }

                return isValid;
            }

            function checkUniqueness(type, value, $field) {
                const cacheKey = `${type}_${value}`;

                // Check cache first
                if (uniqueValidationCache[cacheKey] !== undefined) {
                    showUniqueValidationResult(type, $field, uniqueValidationCache[cacheKey]);
                    return;
                }

                // Make AJAX call to server
                let url;
                let paramName;

                switch (type) {
                    case 'username':
                        url = '@Url.Action("CheckUsernameAvailability", "Account")';
                        paramName = 'username';
                        break;
                    case 'email':
                        url = '@Url.Action("CheckEmailAvailability", "Account")';
                        paramName = 'email';
                        break;
                    case 'phone':
                        url = '@Url.Action("CheckPhoneAvailability", "Account")';
                        paramName = 'phoneNumber';
                        break;
                    default:
                        return;
                }

                $.ajax({
                    url: url,
                    type: 'GET',
                    data: (function() { var obj = {}; obj[paramName] = value; return obj; })(),
                    success: function(response) {
                        uniqueValidationCache[cacheKey] = response.available;
                        showUniqueValidationResult(type, $field, response.available);
                        updateStepProgress();
                        updateNavigationState();
                    },
                    error: function() {
                        // On error, assume not unique to be safe
                        uniqueValidationCache[cacheKey] = false;
                        showUniqueValidationResult(type, $field, false);
                        updateStepProgress();
                        updateNavigationState();
                    }
                });
            }

            function showUniqueValidationResult(type, $field, isUnique) {
                const $errorMsg = $field.closest('.form-group').find('.error-message');
                const $successMsg = $field.closest('.form-group').find('.success-message-field');
                const fieldId = $field.attr('id') || $field.attr('name');
                const stepNum = getStepForField(fieldId);

                if (isUnique) {
                    $errorMsg.removeClass('show');
                    $successMsg.addClass('show');
                    if (stepNum) stepValidationStatus[stepNum][fieldId] = true;
                } else {
                    $successMsg.removeClass('show');
                    $errorMsg.text(`This ${type} is already taken`).addClass('show');
                    if (stepNum) stepValidationStatus[stepNum][fieldId] = false;
                }
            }

            function validatePasswordStrength(password) {
                const requirements = {
                    length: password.length >= 8,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    number: /\d/.test(password),
                    special: /[!@@#$%^&*(),.?\":{}|<>]/.test(password)
                };

                // Update requirement indicators
                Object.keys(requirements).forEach(req => {
                    const $requirement = $(`#req-${req}`);
                    const $icon = $requirement.find('i');

                    if (requirements[req]) {
                        $requirement.addClass('met');
                        $icon.removeClass('fa-times').addClass('fa-check');
                    } else {
                        $requirement.removeClass('met');
                        $icon.removeClass('fa-check').addClass('fa-times');
                    }
                });

                // Calculate strength
                const metCount = Object.values(requirements).filter(Boolean).length;
                let strength = 0;
                let strengthClass = '';
                let strengthText = '';

                if (metCount >= 5) {
                    strength = 100;
                    strengthClass = 'strength-strong';
                    strengthText = 'Strong';
                } else if (metCount >= 4) {
                    strength = 75;
                    strengthClass = 'strength-good';
                    strengthText = 'Good';
                } else if (metCount >= 2) {
                    strength = 50;
                    strengthClass = 'strength-fair';
                    strengthText = 'Fair';
                } else if (password.length > 0) {
                    strength = 25;
                    strengthClass = 'strength-weak';
                    strengthText = 'Weak';
                }

                // Update strength bar
                const $strengthBar = $('#strength-bar');
                $strengthBar.css('width', strength + '%')
                           .removeClass('strength-weak strength-fair strength-good strength-strong')
                           .addClass(strengthClass);

                const isStrong = metCount >= 5;
                stepValidationStatus[3]['Password'] = isStrong;

                const $errorMsg = $('#password-error');
                const $successMsg = $('#password-success');

                if (password && !isStrong) {
                    $errorMsg.addClass('show');
                    $successMsg.removeClass('show');
                } else if (isStrong) {
                    $errorMsg.removeClass('show');
                    $successMsg.addClass('show');
                } else {
                    $errorMsg.removeClass('show');
                    $successMsg.removeClass('show');
                }

                return isStrong;
            }

            function validatePasswordConfirmation() {
                const password = $('#password-field').val();
                const confirmPassword = $('#confirm-password-field').val();
                const $errorMsg = $('#confirm-password-error');
                const $successMsg = $('#confirm-password-success');

                // Only consider it a match if both fields have values AND they match AND password is strong
                const passwordIsStrong = stepValidationStatus[3]['Password'] === true;
                const isMatch = password && confirmPassword && password === confirmPassword && passwordIsStrong;
                stepValidationStatus[3]['ConfirmPassword'] = isMatch;

                if (confirmPassword.length > 0) {
                    if (password !== confirmPassword) {
                        // Passwords don't match
                        $errorMsg.text('Passwords do not match').addClass('show');
                        $successMsg.removeClass('show');
                    } else if (password === confirmPassword && password.length > 0) {
                        if (passwordIsStrong) {
                            // Passwords match and password is strong
                            $errorMsg.removeClass('show');
                            $successMsg.addClass('show');
                        } else {
                            // Passwords match but password is not strong enough
                            $errorMsg.text('Password must meet all requirements first').addClass('show');
                            $successMsg.removeClass('show');
                        }
                    }
                } else {
                    // No confirm password entered yet
                    $errorMsg.removeClass('show');
                    $successMsg.removeClass('show');
                }

                return isMatch;
            }

            function getStepForField(fieldId) {
                const step1Fields = ['FirstName', 'LastName', 'Username', 'DateOfBirth', 'Country'];
                const step2Fields = ['Email', 'PhoneNumber', 'City', 'State', 'ZipCode'];
                const step3Fields = ['Password', 'ConfirmPassword', 'SecurityQuestion', 'SecurityAnswer'];

                if (step1Fields.includes(fieldId)) return 1;
                if (step2Fields.includes(fieldId)) return 2;
                if (step3Fields.includes(fieldId)) return 3;
                return null;
            }

            function updateStepProgress() {
                for (let step = 1; step <= totalSteps; step++) {
                    const $step = $(`.step[data-step="${step}"]`);
                    const $progress = $step.find('.step-progress');

                    const requiredFields = getRequiredFieldsForStep(step);
                    const validatedFields = Object.keys(stepValidationStatus[step]).filter(field =>
                        stepValidationStatus[step][field] === true && requiredFields.includes(field)
                    );

                    const progress = requiredFields.length > 0 ?
                        (validatedFields.length / requiredFields.length) * 100 : 0;

                    // Only show progress bar if there's actual progress
                    if (progress > 0) {
                        $step.addClass('has-progress');
                        $progress.css('--progress', progress + '%');
                    } else {
                        $step.removeClass('has-progress');
                        $progress.css('--progress', '0%');
                    }

                    // Add visual feedback for different progress levels
                    if (progress >= 100) {
                        $step.addClass('step-complete');
                    } else {
                        $step.removeClass('step-complete');
                    }

                    // Debug log to see progress
                    console.log(`Step ${step}: ${progress}% (${validatedFields.length}/${requiredFields.length})`, stepValidationStatus[step]);
                }
            }

            function getRequiredFieldsForStep(step) {
                switch (step) {
                    case 1: return ['FirstName', 'LastName', 'Username', 'DateOfBirth', 'Country'];
                    case 2: return ['Email', 'PhoneNumber'];
                    case 3: return ['Password', 'ConfirmPassword', 'SecurityQuestion', 'SecurityAnswer'];
                    default: return [];
                }
            }

            function canProceedToNextStep() {
                const requiredFields = getRequiredFieldsForStep(currentStep);
                return requiredFields.every(field => stepValidationStatus[currentStep][field] === true);
            }

            function canSubmitForm() {
                const termsAccepted = $('#terms').is(':checked');
                const allStepsValid = [1, 2, 3].every(step => {
                    const requiredFields = getRequiredFieldsForStep(step);
                    return requiredFields.every(field => stepValidationStatus[step][field] === true);
                });

                return allStepsValid && termsAccepted;
            }

            function updateNavigationState() {
                const canProceed = canProceedToNextStep();
                const canSubmit = canSubmitForm();

                $('#nextBtn').prop('disabled', !canProceed);
                $('#submitBtn').prop('disabled', !canSubmit);
            }

            function showStep(step) {
                $('.form-section').removeClass('active');
                $(`#step${step}`).addClass('active');
            }

            function updateStepIndicators() {
                // Only remove active class, keep completed
                $('.step').removeClass('active');

                for (let i = 1; i <= totalSteps; i++) {
                    const $step = $(`.step[data-step="${i}"]`);
                    if (i < currentStep) {
                        $step.addClass('completed').css('opacity', '1');
                    } else if (i === currentStep) {
                        $step.removeClass('completed').addClass('active').css('opacity', '1');
                    } else {
                        // Future steps - make them visible but dimmed
                        $step.removeClass('completed').css('opacity', '0.5');
                    }
                }
            }

            function updateNavigation() {
                $('#prevBtn').toggle(currentStep > 1);
                $('#nextBtn').toggle(currentStep < totalSteps);
                $('#submitBtn').toggle(currentStep === totalSteps);
                updateNavigationState();
            }

            function submitForm() {
                const formData = new FormData($('#registrationForm')[0]);

                $.ajax({
                    url: $('#registrationForm').attr('action'),
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        hideLoading();
                        showSuccessAndRedirect();
                    },
                    error: function(xhr, status, error) {
                        hideLoading();
                        alert('An error occurred while creating your account. Please try again.');
                    }
                });
            }

            function showLoading() {
                $('#loadingOverlay').fadeIn();
            }

            function hideLoading() {
                $('#loadingOverlay').fadeOut();
            }

            function showSuccessAndRedirect() {
                $('.registration-card').fadeOut(function() {
                    $('#successMessage').fadeIn();
                    // Auto redirect after 3 seconds
                    setTimeout(function() {
                        window.location.href = '@Url.Action("Login", "Account")';
                    }, 3000);
                });
            }

            function createParticles() {
                const particlesContainer = $('#particles');
                for (let i = 0; i < 30; i++) {
                    const particle = $('<div class="particle"></div>');
                    const size = Math.random() * 4 + 2;
                    particle.css({
                        width: size + 'px',
                        height: size + 'px',
                        left: Math.random() * 100 + '%',
                        animationDelay: Math.random() * 20 + 's',
                        animationDuration: (Math.random() * 20 + 20) + 's'
                    });
                    particlesContainer.append(particle);
                }
            }

            // Don't auto-validate pre-filled fields on page load
            // Progress should start at 0 until user actually interacts with fields

            // Don't auto-validate pre-filled fields - wait for user interaction
            // Progress should start at 0% with no initialization call to updateStepProgress()

            // Enhanced detection for autofilled or bulk-updated fields
            function checkForAutoFilledFields() {
                let needsUpdate = false;
                $('input[required], select[required], input[data-validation]').each(function() {
                    const $field = $(this);
                    const fieldId = $field.attr('id') || $field.attr('name');
                    const stepNum = getStepForField(fieldId);

                    if (stepNum && $field.val()) {
                        // Check if field validation status doesn't match current value
                        const currentStatus = stepValidationStatus[stepNum][fieldId];
                        if (currentStatus === undefined) {
                            console.log(`Auto-validating filled field: ${fieldId}`);
                            validateField($field);
                            needsUpdate = true;
                        }
                    }
                });

                if (needsUpdate) {
                    updateStepProgress();
                    updateNavigationState();
                }
            }

            // Check every 500ms for faster response to auto-fill
            setInterval(checkForAutoFilledFields, 500);

            // Also listen for browser auto-fill events
            $(document).on('focusout', 'input, select', function() {
                setTimeout(checkForAutoFilledFields, 100);
            });

            // Listen for form changes that might indicate auto-fill
            $(document).on('DOMSubtreeModified input propertychange', 'form', function() {
                setTimeout(checkForAutoFilledFields, 100);
            });
        });
    </script>

    @section Scripts {
        <partial name="_ValidationScriptsPartial" />
        <script>
            // Server-side validation handling
            @if (!ViewData.ModelState.IsValid)
            {
                <text>
                $(document).ready(function() {
                    var errorMessages = @Html.Raw(Json.Serialize(ViewData.ModelState.Values
                        .SelectMany(v => v.Errors)
                        .Select(e => e.ErrorMessage)));

                    if (errorMessages.length > 0) {
                        // Show errors
                        console.log('Validation errors:', errorMessages);
                    }
                });
                </text>
            }

            // Success message handling
            @if (ViewBag.SuccessMessage != null)
            {
                <text>
                $(document).ready(function() {
                    showSuccess();
                    setTimeout(function() {
                        window.location.href = '@Url.Action("Login", "Account")';
                    }, 3000);
                });
                </text>
            }
        </script>
    }
</body>
</html>