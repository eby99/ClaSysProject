<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome - Registration Portal</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Space+Grotesk:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            --secondary-gradient: linear-gradient(45deg, #ff6b6b, #ee5a52, #ff8a80);
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
            --text-primary: rgba(255, 255, 255, 0.95);
            --text-secondary: rgba(255, 255, 255, 0.8);
            --shadow-light: rgba(255, 255, 255, 0.1);
            --shadow-dark: rgba(0, 0, 0, 0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            overflow: hidden;
            background: var(--primary-gradient);
            background-attachment: fixed;
            position: relative;
        }

        /* Animated gradient background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 107, 107, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 80%, rgba(240, 147, 251, 0.3) 0%, transparent 50%);
            animation: gradientShift 20s ease-in-out infinite;
            z-index: 0;
        }

        /* Keyframes for gradient animation */
        @@keyframes gradientShift {
            0%, 100% { opacity: 1; transform: scale(1) rotate(0deg); }
            25% { opacity: 0.8; transform: scale(1.05) rotate(1deg); }
            50% { opacity: 0.9; transform: scale(0.95) rotate(-1deg); }
            75% { opacity: 0.85; transform: scale(1.02) rotate(0.5deg); }
        }
        
        #three-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }
        
        .landing-overlay {
            position: relative;
            z-index: 10;
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            backdrop-filter: blur(2px);
        }
        
        .hero-content {
            max-width: 900px;
            padding: 3rem 2.5rem;
            backdrop-filter: blur(25px) saturate(180%);
            background: linear-gradient(135deg, 
                rgba(255, 255, 255, 0.15) 0%, 
                rgba(255, 255, 255, 0.05) 50%, 
                rgba(255, 255, 255, 0.1) 100%
            );
            border-radius: 32px;
            border: 1px solid var(--glass-border);
            box-shadow: 
                0 32px 64px rgba(0, 0, 0, 0.25),
                0 16px 32px rgba(0, 0, 0, 0.15),
                inset 0 1px 0 rgba(255, 255, 255, 0.3);
            animation: heroEntrance 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            position: relative;
            overflow: hidden;
        }

        .hero-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, 
                transparent 0%, 
                rgba(255, 255, 255, 0.4) 20%, 
                rgba(255, 255, 255, 0.6) 50%, 
                rgba(255, 255, 255, 0.4) 80%, 
                transparent 100%
            );
        }
        
        @@keyframes heroEntrance {
            0% {
                opacity: 0;
                transform: translateY(60px) scale(0.9);
                filter: blur(10px);
            }
            50% {
                opacity: 0.8;
                transform: translateY(20px) scale(0.95);
                filter: blur(5px);
            }
            100% {
                opacity: 1;
                transform: translateY(0) scale(1);
                filter: blur(0);
            }
        }
        
        .hero-title {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 4.5rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 1.5rem;
            background: linear-gradient(135deg, 
                #ffffff 0%, 
                #f8f9ff 25%, 
                #e8f0ff 50%, 
                #ffffff 75%, 
                #f0f8ff 100%
            );
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 60px rgba(255, 255, 255, 0.3);
            animation: titleGlow 3s ease-in-out infinite alternate;
            letter-spacing: -0.02em;
            line-height: 1.1;
        }

        @@keyframes titleGlow {
            0% { 
                filter: brightness(1) drop-shadow(0 0 20px rgba(255, 255, 255, 0.3));
                transform: translateY(0);
            }
            100% { 
                filter: brightness(1.1) drop-shadow(0 0 30px rgba(255, 255, 255, 0.5));
                transform: translateY(-2px);
            }
        }
        
        .hero-subtitle {
            font-size: 1.4rem;
            font-weight: 400;
            color: var(--text-secondary);
            margin-bottom: 3rem;
            text-shadow: 0 2px 12px rgba(0, 0, 0, 0.3);
            animation: subtitleFade 1.5s ease-out 0.3s both;
            line-height: 1.6;
            letter-spacing: 0.01em;
        }

       @@keyframes subtitleFade {
            0% {
                opacity: 0;
                transform: translateY(20px);
            }
            100% {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .button-container {
            display: flex;
            gap: 1.5rem;
            justify-content: center;
            flex-wrap: wrap;
            animation: buttonsSlide 1.8s ease-out 0.6s both;
        }

        @@keyframes buttonsSlide {
            0% {
                opacity: 0;
                transform: translateY(30px);
            }
            100% {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .hero-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            padding: 1.25rem 2.75rem;
            font-size: 1.1rem;
            font-weight: 600;
            text-decoration: none;
            border-radius: 50px;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            position: relative;
            overflow: hidden;
            border: 2px solid transparent;
            min-width: 200px;
            backdrop-filter: blur(10px);
            letter-spacing: 0.01em;
        }

        .hero-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, 
                transparent 0%, 
                rgba(255, 255, 255, 0.2) 50%, 
                transparent 100%
            );
            transition: left 0.6s ease;
        }

        .hero-button:hover::before {
            left: 100%;
        }
        
        .btn-primary-hero {
            background: linear-gradient(45deg, #ff8a65, #ff7043, #ff5722);
            color: white;
            box-shadow:
                0 12px 24px rgba(255, 87, 34, 0.4),
                0 6px 12px rgba(255, 87, 34, 0.3);
            border: 2px solid rgba(255, 255, 255, 0.1);
        }

        .btn-secondary-hero {
            background: linear-gradient(45deg, #4ade80, #22d3ee, #10b981);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.1);
            box-shadow:
                0 12px 24px rgba(16, 185, 129, 0.4),
                0 6px 12px rgba(16, 185, 129, 0.3);
        }
        
        .hero-button:hover {
            transform: translateY(-8px) scale(1.05);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.25);
        }
        
        .btn-primary-hero:hover {
            background: linear-gradient(45deg, #ff6f47, #ff5722, #e64a19);
            box-shadow:
                0 20px 40px rgba(255, 87, 34, 0.6),
                0 0 30px rgba(255, 87, 34, 0.4);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .btn-secondary-hero:hover {
            background: linear-gradient(45deg, #22d3ee, #10b981, #059669);
            box-shadow:
                0 20px 40px rgba(16, 185, 129, 0.6),
                0 0 30px rgba(16, 185, 129, 0.4);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .hero-button i {
            font-size: 1.1em;
            transition: transform 0.3s ease;
        }

        .hero-button:hover i {
            transform: translateX(3px);
        }
        
        .floating-particles {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: 2;
            pointer-events: none;
        }
        
        .particle {
            position: absolute;
            border-radius: 50%;
            pointer-events: none;
            filter: blur(1px);
        }

        .particle-1 { 
            background: radial-gradient(circle, rgba(255, 255, 255, 0.6) 0%, rgba(255, 255, 255, 0.1) 70%);
            animation: float1 20s infinite linear;
        }
        .particle-2 { 
            background: radial-gradient(circle, rgba(102, 126, 234, 0.5) 0%, rgba(102, 126, 234, 0.1) 70%);
            animation: float2 25s infinite linear;
        }
        .particle-3 { 
            background: radial-gradient(circle, rgba(240, 147, 251, 0.4) 0%, rgba(240, 147, 251, 0.1) 70%);
            animation: float3 18s infinite linear;
        }

        @@keyframes float1 {
            0% { transform: translateY(100vh) translateX(0) rotate(0deg) scale(0); opacity: 0; }
            10% { opacity: 1; transform: translateY(90vh) translateX(20px) rotate(36deg) scale(1); }
            90% { opacity: 1; }
            100% { transform: translateY(-10vh) translateX(100px) rotate(360deg) scale(0); opacity: 0; }
        }

       @@keyframes float2 {
            0% { transform: translateY(100vh) translateX(0) rotate(0deg) scale(0); opacity: 0; }
            10% { opacity: 0.8; transform: translateY(90vh) translateX(-30px) rotate(-36deg) scale(1); }
            90% { opacity: 0.8; }
            100% { transform: translateY(-10vh) translateX(-80px) rotate(-360deg) scale(0); opacity: 0; }
        }

        @@keyframes float3 {
            0% { transform: translateY(100vh) translateX(0) rotate(0deg) scale(0); opacity: 0; }
            10% { opacity: 0.6; transform: translateY(90vh) translateX(50px) rotate(45deg) scale(1); }
            90% { opacity: 0.6; }
            100% { transform: translateY(-10vh) translateX(150px) rotate(405deg) scale(0); opacity: 0; }
        }
        
        .features-preview {
            position: absolute;
            bottom: 2rem;
            left: 50%;
            transform: translateX(-50%);
            color: var(--text-secondary);
            font-size: 0.95rem;
            font-weight: 500;
            text-align: center;
            animation: featuresGlow 2s ease-in-out infinite alternate;
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.05);
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            letter-spacing: 0.05em;
        }

        @@keyframes featuresGlow {
            0% { opacity: 0.8; transform: translateX(-50%) translateY(0); }
            100% { opacity: 1; transform: translateX(-50%) translateY(-3px); }
        }

        .features-preview::before {
            content: '';
            position: absolute;
            top: -1px;
            left: -1px;
            right: -1px;
            bottom: -1px;
            background: linear-gradient(45deg, rgba(255, 255, 255, 0.2), transparent, rgba(255, 255, 255, 0.2));
            border-radius: 25px;
            z-index: -1;
            animation: borderGlow 3s ease-in-out infinite;
        }

        @@keyframes borderGlow {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.8; }
        }

        /* Scroll indicator */
        .scroll-indicator {
            position: absolute;
            bottom: 6rem;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-secondary);
            font-size: 0.8rem;
            animation: scrollPulse 2s ease-in-out infinite;
        }

        .scroll-indicator::after {
            content: '';
            width: 2px;
            height: 20px;
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), transparent);
            border-radius: 1px;
            animation: scrollLine 2s ease-in-out infinite;
        }

        @@keyframes scrollPulse {
            0%, 100% { opacity: 0.6; }
            50% { opacity: 1; }
        }

        @@keyframes scrollLine {
            0% { height: 20px; opacity: 0.6; }
            50% { height: 30px; opacity: 1; }
            100% { height: 20px; opacity: 0.6; }
        }
        
        @@media (max-width: 576px) {
            .hero-title {
                font-size: 2.2rem;
                line-height: 1.2;
            }

            .hero-subtitle {
                font-size: 1rem;
                margin-bottom: 2rem;
                line-height: 1.5;
            }

            .button-container {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }

            .hero-content {
                margin: 0.5rem;
                padding: 1.5rem 1rem;
                border-radius: 24px;
            }

            .hero-button {
                min-width: 280px;
                width: 100%;
                padding: 1rem 1.5rem;
                font-size: 1rem;
            }

            .features-preview {
                font-size: 0.85rem;
                padding: 0.6rem 1.25rem;
            }

            .scroll-indicator {
                bottom: 5rem;
                font-size: 0.75rem;
            }
        }

        @@media (min-width: 577px) and (max-width: 768px) {
            .hero-title {
                font-size: 2.8rem;
            }

            .hero-subtitle {
                font-size: 1.1rem;
                margin-bottom: 2.5rem;
            }

            .button-container {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }

            .hero-content {
                margin: 1rem;
                padding: 2rem 1.5rem;
            }

            .hero-button {
                min-width: 250px;
                padding: 1.1rem 2rem;
            }
        }

        @@media (min-width: 769px) and (max-width: 992px) {
            .hero-title {
                font-size: 3.5rem;
            }

            .hero-content {
                max-width: 800px;
                padding: 2.5rem 2rem;
            }

            .button-container {
                gap: 1.25rem;
            }
        }

        @@media (min-width: 1200px) {
            .hero-content {
                max-width: 950px;
                padding: 3.5rem 3rem;
            }

            .hero-title {
                font-size: 5rem;
            }

            .hero-subtitle {
                font-size: 1.5rem;
            }
        }

        /* Loading animation */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--primary-gradient);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeOutLoading 1s ease-out 0.5s both;
        }

        @@keyframes fadeOutLoading {
            to {
                opacity: 0;
                visibility: hidden;
            }
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>

    <div class="loading-overlay">
        <div class="loading-spinner"></div>
    </div>

    <div id="three-container"></div>
    <div class="floating-particles" id="particles"></div>

    <div class="landing-overlay">
        <div class="hero-content">
            <h1 class="hero-title">Welcome to ClasySys</h1>
            <p class="hero-subtitle">Your Gateway to Secure Registration & Intelligent Management</p>
            

            <div class="button-container">
                <a asp-controller="Account" asp-action="Register" class="hero-button btn-secondary-hero">
                    <i class="fas fa-user-plus"></i>
                    Create Account
                </a>
                <a asp-controller="Account" asp-action="Login" class="hero-button btn-primary-hero">
                    <i class="fas fa-sign-in-alt"></i>
                    Sign In
                </a>
            </div>

        </div>
        
        <div class="scroll-indicator"></div>
        
        <div class="features-preview">
            <p>Secure • Fast • Modern • Reliable • Intelligent</p>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Three.js Enhanced Scene
        let scene, camera, renderer, composer;
        let mouseX = 0, mouseY = 0;
        let targetMouseX = 0, targetMouseY = 0;
        let time = 0;
        
        function init() {
            // Scene setup
            scene = new THREE.Scene();
            scene.fog = new THREE.Fog(0x000000, 10, 50);
            
            // Camera with better positioning
            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100);
            camera.position.set(0, 0, 8);
            
            // Enhanced renderer
            renderer = new THREE.WebGLRenderer({ 
                alpha: true, 
                antialias: true, 
                powerPreference: "high-performance"
            });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            renderer.setClearColor(0x000000, 0);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            
            document.getElementById('three-container').appendChild(renderer.domElement);
            
            // Create enhanced floating elements
            createFloatingElements();
            
            // Event listeners
            document.addEventListener('mousemove', onMouseMove, { passive: true });
            window.addEventListener('resize', onWindowResize, { passive: true });
            
            animate();
        }
        
        function createFloatingElements() {
            const elements = [];
            const geometries = [
                new THREE.IcosahedronGeometry(0.8, 1),
                new THREE.OctahedronGeometry(0.6),
                new THREE.TetrahedronGeometry(0.7),
                new THREE.DodecahedronGeometry(0.5),
                new THREE.SphereGeometry(0.4, 16, 12),
                new THREE.TorusGeometry(0.5, 0.2, 8, 16)
            ];
            
            // Create main floating elements
            for (let i = 0; i < 20; i++) {
                const geometry = geometries[Math.floor(Math.random() * geometries.length)];
                
                const material = new THREE.MeshPhongMaterial({
                    color: new THREE.Color().setHSL(
                        0.6 + Math.random() * 0.4, 
                        0.7 + Math.random() * 0.3, 
                        0.6 + Math.random() * 0.4
                    ),
                    transparent: true,
                    opacity: 0.3 + Math.random() * 0.4,
                    shininess: 100,
                    wireframe: Math.random() > 0.7,
                    emissive: new THREE.Color().setHSL(
                        0.6 + Math.random() * 0.4, 
                        0.3, 
                        0.1
                    )
                });
                
                const element = new THREE.Mesh(geometry, material);
                
                // Positioning in 3D space
                const radius = 15 + Math.random() * 10;
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.random() * Math.PI;
                
                element.position.x = radius * Math.sin(phi) * Math.cos(theta);
                element.position.y = radius * Math.sin(phi) * Math.sin(theta);
                element.position.z = radius * Math.cos(phi) - 5;
                
                element.rotation.set(
                    Math.random() * Math.PI,
                    Math.random() * Math.PI,
                    Math.random() * Math.PI
                );
                
                // Animation properties
                element.userData = {
                    originalPosition: element.position.clone(),
                    rotationSpeed: {
                        x: (Math.random() - 0.5) * 0.02,
                        y: (Math.random() - 0.5) * 0.02,
                        z: (Math.random() - 0.5) * 0.02
                    },
                    floatSpeed: 0.5 + Math.random() * 0.5,
                    floatAmplitude: 0.5 + Math.random() * 1.5,
                    phase: Math.random() * Math.PI * 2
                };
                
                scene.add(element);
                elements.push(element);
            }
            
            // Add ambient and directional lighting
            const ambientLight = new THREE.AmbientLight(0x6366f1, 0.4);
            scene.add(ambientLight);
            
            const directionalLight1 = new THREE.DirectionalLight(0x8b5cf6, 0.6);
            directionalLight1.position.set(5, 5, 5);
            scene.add(directionalLight1);
            
            const directionalLight2 = new THREE.DirectionalLight(0xff6b9d, 0.4);
            directionalLight2.position.set(-5, -5, 3);
            scene.add(directionalLight2);
            
            // Add point lights for dynamic lighting
            const pointLight1 = new THREE.PointLight(0x667eea, 0.8, 20);
            pointLight1.position.set(10, 10, 5);
            scene.add(pointLight1);
            
            const pointLight2 = new THREE.PointLight(0xf093fb, 0.6, 25);
            pointLight2.position.set(-8, -8, 3);
            scene.add(pointLight2);
            
            window.floatingElements = elements;
        }
        
        function onMouseMove(event) {
            targetMouseX = (event.clientX / window.innerWidth) * 2 - 1;
            targetMouseY = -(event.clientY / window.innerHeight) * 2 + 1;
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            time += 0.01;
            
            // Smooth mouse interpolation
            mouseX += (targetMouseX - mouseX) * 0.02;
            mouseY += (targetMouseY - mouseY) * 0.02;
            
            // Animate floating elements
            if (window.floatingElements) {
                window.floatingElements.forEach((element, index) => {
                    const userData = element.userData;
                    
                    // Complex floating motion
                    element.position.x = userData.originalPosition.x + 
                        Math.sin(time * userData.floatSpeed + userData.phase) * userData.floatAmplitude +
                        mouseX * 2;
                    element.position.y = userData.originalPosition.y + 
                        Math.cos(time * userData.floatSpeed * 0.7 + userData.phase) * userData.floatAmplitude * 0.8 +
                        mouseY * 1.5;
                    element.position.z = userData.originalPosition.z + 
                        Math.sin(time * userData.floatSpeed * 0.5 + userData.phase) * 0.5;
                    
                    // Smooth rotation
                    element.rotation.x += userData.rotationSpeed.x + mouseY * 0.001;
                    element.rotation.y += userData.rotationSpeed.y + mouseX * 0.001;
                    element.rotation.z += userData.rotationSpeed.z;
                    
                    // Dynamic opacity based on distance
                    const distance = camera.position.distanceTo(element.position);
                    element.material.opacity = Math.max(0.1, Math.min(0.7, 10 / distance));
                });
            }
            
            // Smooth camera movement
            camera.position.x += (mouseX * 1.5 - camera.position.x) * 0.02;
            camera.position.y += (mouseY * 1.2 - camera.position.y) * 0.02;
            
            // Camera breathing effect
            camera.position.z = 8 + Math.sin(time * 0.5) * 0.5;
            
            renderer.render(scene, camera);
        }
        
        function createAdvancedParticles() {
            const particlesContainer = document.getElementById('particles');
            const particleTypes = ['particle-1', 'particle-2', 'particle-3'];
            const particleCount = 50;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = `particle ${particleTypes[Math.floor(Math.random() * particleTypes.length)]}`;
                
                const size = 2 + Math.random() * 8;
                particle.style.width = size + 'px';
                particle.style.height = size + 'px';
                particle.style.left = Math.random() * 100 + '%';
                
                const duration = 15 + Math.random() * 20;
                particle.style.animationDuration = duration + 's';
                particle.style.animationDelay = Math.random() * 20 + 's';
                
                particlesContainer.appendChild(particle);
            }
        }

        // Enhanced button interactions
        function initButtonEffects() {
            const buttons = document.querySelectorAll('.hero-button');
            
            buttons.forEach(button => {
                button.addEventListener('mouseenter', (e) => {
                    e.target.style.transform = 'translateY(-8px) scale(1.05)';
                });
                
                button.addEventListener('mouseleave', (e) => {
                    e.target.style.transform = 'translateY(0) scale(1)';
                });
                
                button.addEventListener('click', (e) => {
                    const href = e.target.getAttribute('href') || e.target.closest('a')?.getAttribute('href');

                    if (href) {
                        e.preventDefault();

                        // Create ripple effect
                        const ripple = document.createElement('span');
                        const rect = e.target.getBoundingClientRect();
                        const size = Math.max(rect.width, rect.height);
                        const x = e.clientX - rect.left - size / 2;
                        const y = e.clientY - rect.top - size / 2;

                        ripple.style.position = 'absolute';
                        ripple.style.borderRadius = '50%';
                        ripple.style.background = 'rgba(255, 255, 255, 0.6)';
                        ripple.style.transform = 'scale(0)';
                        ripple.style.animation = 'ripple 0.6s linear';
                        ripple.style.left = x + 'px';
                        ripple.style.top = y + 'px';
                        ripple.style.width = size + 'px';
                        ripple.style.height = size + 'px';
                        ripple.style.pointerEvents = 'none';

                        e.target.appendChild(ripple);

                        // Navigate after ripple effect
                        setTimeout(() => {
                            window.location.href = href;
                        }, 300);
                    }
                });
            });
        }

        // Parallax scroll effect for mobile
        function initParallaxEffects() {
            let ticking = false;
            
            function updateParallax() {
                const scrolled = window.pageYOffset;
                const parallaxElements = document.querySelectorAll('.hero-content, .features-preview');
                
                parallaxElements.forEach(el => {
                    const speed = el.getAttribute('data-speed') || 0.5;
                    const yPos = -(scrolled * speed);
                    el.style.transform = `translateY(${yPos}px)`;
                });
                
                ticking = false;
            }
            
            function requestTick() {
                if (!ticking) {
                    requestAnimationFrame(updateParallax);
                    ticking = true;
                }
            }
            
            window.addEventListener('scroll', requestTick, { passive: true });
        }

        // Advanced cursor trail effect
        function createCursorTrail() {
            const trail = [];
            const trailLength = 20;
            
            for (let i = 0; i < trailLength; i++) {
                const dot = document.createElement('div');
                dot.style.position = 'fixed';
                dot.style.width = '4px';
                dot.style.height = '4px';
                dot.style.background = `rgba(255, 255, 255, ${0.8 - (i * 0.04)})`;
                dot.style.borderRadius = '50%';
                dot.style.pointerEvents = 'none';
                dot.style.zIndex = '9999';
                dot.style.transition = 'all 0.1s ease-out';
                document.body.appendChild(dot);
                trail.push(dot);
            }
            
            let mouseX = 0, mouseY = 0;
            
            document.addEventListener('mousemove', (e) => {
                mouseX = e.clientX;
                mouseY = e.clientY;
            });
            
            function animateTrail() {
                let x = mouseX, y = mouseY;
                
                trail.forEach((dot, index) => {
                    dot.style.left = x + 'px';
                    dot.style.top = y + 'px';
                    dot.style.transform = `scale(${1 - index * 0.05})`;
                    
                    const nextDot = trail[index + 1] || trail[0];
                    x += (parseFloat(nextDot.style.left) - x) * 0.3;
                    y += (parseFloat(nextDot.style.top) - y) * 0.3;
                });
                
                requestAnimationFrame(animateTrail);
            }
            
            animateTrail();
        }

        // Initialize everything with enhanced loading
        document.addEventListener('DOMContentLoaded', function() {
            // Add CSS for ripple animation
            const style = document.createElement('style');
            style.textContent = `
                @@keyframes ripple {
                    to {
                        transform: scale(4);
                        opacity: 0;
                    }
                }
                
                @@keyframes float-in {
                    0% {
                        opacity: 0;
                        transform: translateY(100px) rotate(180deg);
                    }
                    100% {
                        opacity: 1;
                        transform: translateY(0) rotate(0deg);
                    }
                }
                
                .cursor-trail {
                    position: fixed;
                    width: 10px;
                    height: 10px;
                    background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, transparent 70%);
                    border-radius: 50%;
                    pointer-events: none;
                    z-index: 9999;
                    mix-blend-mode: difference;
                }
                
                /* Enhanced mobile optimizations */
                @@media (max-width: 768px) {
                    .cursor-trail { display: none; }
                    
                    .hero-button {
                        transform: none !important;
                        transition: background-color 0.3s ease, border-color 0.3s ease;
                    }
                    
                    .hero-button:hover {
                        transform: none !important;
                    }
                    
                    .hero-button:active {
                        transform: scale(0.98) !important;
                    }
                }
                
                /* Accessibility improvements */
               @@media (prefers-reduced-motion: reduce) {
                    *, *::before, *::after {
                        animation-duration: 0.01ms !important;
                        animation-iteration-count: 1 !important;
                        transition-duration: 0.01ms !important;
                    }
                    
                    .floating-particles {
                        display: none;
                    }
                }
                
                /* High contrast mode support */
                @@media (prefers-contrast: high) {
                    .hero-content {
                        background: rgba(0, 0, 0, 0.8);
                        border: 2px solid white;
                    }
                    
                    .hero-title {
                        color: white;
                        text-shadow: none;
                    }
                    
                    .hero-subtitle {
                        color: white;
                    }
                }
                
                /* Focus styles for accessibility */
                .hero-button:focus {
                    outline: 3px solid rgba(255, 255, 255, 0.8);
                    outline-offset: 3px;
                }
                
                /* Loading shimmer effect */
                .shimmer {
                    background: linear-gradient(90deg, 
                        rgba(255,255,255,0.1) 0%, 
                        rgba(255,255,255,0.3) 50%, 
                        rgba(255,255,255,0.1) 100%);
                    background-size: 200% 100%;
                    animation: shimmer 2s infinite;
                }
                
                @@keyframes shimmer {
                    0% { background-position: -200% 0; }
                    100% { background-position: 200% 0; }
                }
            `;
            document.head.appendChild(style);
            
            // Initialize all components
            setTimeout(() => {
                init();
                createAdvancedParticles();
                initButtonEffects();
                initParallaxEffects();
                
                // Only add cursor trail on desktop
                if (window.innerWidth > 768) {
                    createCursorTrail();
                }
                
                // Add shimmer effect to buttons initially
                document.querySelectorAll('.hero-button').forEach(button => {
                    button.classList.add('shimmer');
                    setTimeout(() => {
                        button.classList.remove('shimmer');
                    }, 3000);
                });
                
                // Performance monitoring
                if ('requestIdleCallback' in window) {
                    requestIdleCallback(() => {
                        console.log('🎨 Enhanced landing page loaded successfully');
                    });
                }
                
            }, 100);
            
            // Service worker for performance (if needed)
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('/sw.js')
                        .catch(err => console.log('SW registration failed'));
                });
            }
        });

        // Enhanced performance optimizations
        const observerOptions = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                } else {
                    entry.target.style.animationPlayState = 'paused';
                }
            });
        }, observerOptions);

        // Observe animated elements for performance
        document.querySelectorAll('.particle, .hero-content, .floating-particles').forEach(el => {
            observer.observe(el);
        });

        // Cleanup function for memory management
        window.addEventListener('beforeunload', () => {
            if (window.floatingElements) {
                window.floatingElements.forEach(element => {
                    scene.remove(element);
                    element.geometry.dispose();
                    element.material.dispose();
                });
            }
            
            if (renderer) {
                renderer.dispose();
            }
        });
        
        // Add touch gestures for mobile
        let touchStartX = 0;
        let touchStartY = 0;
        
        document.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, { passive: true });
        
        document.addEventListener('touchmove', (e) => {
            if (!touchStartX || !touchStartY) return;
            
            const touchEndX = e.touches[0].clientX;
            const touchEndY = e.touches[0].clientY;
            
            const deltaX = (touchEndX - touchStartX) / window.innerWidth;
            const deltaY = (touchEndY - touchStartY) / window.innerHeight;
            
            // Update mouse position for mobile interactions
            targetMouseX = deltaX * 2;
            targetMouseY = -deltaY * 2;
        }, { passive: true });
    </script>
</body>
</html>